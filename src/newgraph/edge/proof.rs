use chrono::{Duration, NaiveDateTime};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

use crate::{
    error::Error,
    upstream::{DataSource, Platform},
};

/// Edge to connect two `Identity`s.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Proof {
    /// UUID of this record. Generated by us to provide a better
    /// global-uniqueness for future P2P-network data exchange
    /// scenario.
    pub uuid: Uuid,
    /// Data source (upstream) which provides this connection info.
    pub source: DataSource,
    /// ID of this connection in upstream platform to locate (if any).
    pub record_id: Option<String>,
    /// When this connection is recorded in upstream platform (if platform gives such data).
    pub created_at: Option<NaiveDateTime>,
    /// When this connection is fetched by us RelationService.
    pub updated_at: NaiveDateTime,
}