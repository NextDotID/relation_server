
use chrono::{Duration, NaiveDateTime};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

// use crate::newgraph::edge::proof::Proof;

use crate::{
    error::Error,
    newgraph::edge::proof::Proof,
    upstream::{DataSource, Platform},
};

#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct Identity {
    /// UUID of this record. Generated by us to provide a better
    /// global-uniqueness for future P2P-network data exchange
    /// scenario.
    pub uuid: Option<Uuid>,
    /// Platform.
    pub platform: Platform,
    /// Identity on target platform.
    /// Username or database primary key (prefer, usually digits).
    /// e.g. `Twitter` has this digits-like user ID thing.
    pub identity: String,
    /// Usually user-friendly screen name.
    /// e.g. for `Twitter`, this is the user's `screen_name`.
    pub display_name: String,
    /// URL to target identity profile page on `platform` (if any).
    pub profile_url: Option<String>,
    /// URL to avatar (if any is recorded and given by target platform).
    pub avatar_url: Option<String>,
    /// Account / identity creation time ON TARGET PLATFORM.
    /// This is not necessarily the same as the creation time of the record in the database.
    /// Since `created_at` may not be recorded or given by target platform.
    /// e.g. `Twitter` has a `created_at` in the user profile API.
    /// but `Ethereum` is obviously no such thing.
    pub created_at: Option<NaiveDateTime>,
    /// When this Identity is added into this database. Generated by us.
    pub added_at: NaiveDateTime,
    /// When it is updated (re-fetched) by us RelationService. Managed by us.
    pub updated_at: NaiveDateTime,
}

#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct Path {
    pub vertices: Vec<Identity>,
    pub edges: Vec<Proof>,
}

#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct Source {
    pub source: DataSource,
    pub relevance: i32,
}

#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct Neighbor {
    pub vertex: Identity,
    pub sources: Vec<Source>,
}