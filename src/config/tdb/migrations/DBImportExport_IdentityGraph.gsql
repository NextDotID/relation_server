CREATE GRAPH IdentityGraph (Identities, Proof_Forward, Proof_Backward, Contracts, Hold_Identity, Hold_Contract, Resolve, Reverse_Resolve, Resolve_Contract, Reverse_Resolve_Contract, Relation_Unique_TX, Relation_TX, Social_Feed)

USE GRAPH IdentityGraph

CREATE OR REPLACE QUERY delete_vertex_and_edge(VERTEX<Identities> p, INT depth=10) FOR GRAPH IdentityGraph SYNTAX v2 {
  SetAccum<EDGE> @@edges;
  SetAccum<VERTEX> @@vertices;
  OrAccum @visited = FALSE;
  OrAccum @visited2 = FALSE;

  seed (Identities) = {p};
  WHILE(seed.size()>0) LIMIT depth DO
    SetAccum<VERTEX> @@pool;
    proof = SELECT v FROM seed:s1-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pf)-Identities:v-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pw)-seed:s2
           WHERE v.@visited == FALSE AND s1 == s2
           ACCUM @@edges += pf, @@edges += pw, @@vertices += v, v.@visited = TRUE
           POST-ACCUM @@pool += v;
    hold = SELECT v FROM seed-((Hold_Identity>|<Hold_Identity):e)-Identities:v
           WHERE v.@visited2 == FALSE
           ACCUM @@edges += e, @@vertices += v, v.@visited2 = TRUE
           POST-ACCUM @@pool += v;
    seed (Identities) = {@@pool};
  END;

  vertex2delete (Identities) = {@@vertices};
  contracts = SELECT v FROM vertex2delete-((Reverse_Resolve_Contract>|<Resolve_Contract):e)-Contracts:v ACCUM DELETE(e);
  contracts = SELECT v FROM vertex2delete-((Hold_Contract>):e)-Contracts:v ACCUM DELETE(e);
  resolved = SELECT v FROM vertex2delete-((Resolve>|<Reverse_Resolve):e)-Identities:v ACCUM DELETE(e);
  proof2delete = SELECT v FROM vertex2delete-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward|Hold_Identity>|<Hold_Identity):e)-Identities:v ACCUM DELETE(e);
  result = SELECT v FROM vertex2delete:v POST-ACCUM DELETE(v);
}

CREATE OR REPLACE QUERY neighbors(VERTEX<Identities> p, INT depth) FOR GRAPH IdentityGraph { 
  SetAccum<EDGE> @@edges;
  SetAccum<VERTEX> @@vertices;
  OrAccum @visited = FALSE;
  OrAccum @visited2 = FALSE;

  seed (Identities) = {p};
  WHILE(seed.size()>0) LIMIT depth DO
    SetAccum<VERTEX> @@pool;
    proof = SELECT v FROM seed-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pf)-Identities:v-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pw)-seed
           WHERE v.@visited == FALSE
           ACCUM @@edges += pf, @@edges += pw
           POST-ACCUM v.@visited = TRUE, @@vertices += v, @@pool += v;
    hold = SELECT v FROM seed-((Hold_Identity>|<Hold_Identity):e)-Identities:v
           WHERE v.@visited2 == FALSE
           ACCUM @@edges += e
           POST-ACCUM v.@visited2 = TRUE, @@vertices += v, @@pool += v;
    seed (Identities) = {@@pool};
  END;
  PRINT @@vertices AS vertices, @@edges AS edges;
}

CREATE OR REPLACE QUERY neighbors_with_source_reverse(VERTEX<Identities> p, INT depth=10, INT reverse_flag=0) FOR GRAPH IdentityGraph SYNTAX V2 {
  MinAccum<INT> @min_dis;
  OrAccum @or_visited = false;
  OrAccum @or_visited2 = false;
  OrAccum @reverse = false;
  ListAccum<VERTEX<Identities>> @path_list;
  SetAccum<STRING> @source_list;
  SetAccum<EDGE> @@edge_set;
  SetAccum<VERTEX<Identities>> @@vertices;
  ListAccum<STRING> @@domainSystems = ["dotbit", "lens", "unstoppabledomains", "space_id", "crossbell"];

  ##### Initialization  #####
  seed (Identities) = {p};
  seed = SELECT s
           FROM seed:s
     ACCUM s.@or_visited += true,
           s.@or_visited2 += true,
           s.@min_dis = 0,
           s.@path_list = s;
  ResultSet (Identities) = seed;

  ##### Calculate distances and paths #####
  WHILE(seed.size()>0) LIMIT depth DO
    SetAccum<VERTEX> @@pool;
    proof = SELECT t
      FROM seed:s1-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pf)-Identities:t-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pw)-seed:s2
        WHERE t.@or_visited == false AND s1 == s2
          ACCUM
            t.@min_dis += s1.@min_dis + 1,
            t.@path_list = s1.@path_list + [t],
            t.@source_list += s1.@source_list,
            t.@source_list += pf.source,
            t.@source_list += pw.source,
            t.@or_visited += true
          POST-ACCUM @@pool += t
        ORDER BY getvid(t);
    ResultSet (Identities) = ResultSet UNION proof;

    hold = SELECT v
      FROM seed:s-((Hold_Identity>|<Hold_Identity):e)-Identities:v
        WHERE v.@or_visited2 == false
        ACCUM
          v.@min_dis += s.@min_dis + 1,
          v.@path_list = s.@path_list + [v],
          v.@source_list += s.@source_list,
          v.@source_list += e.source,
          v.@or_visited2 += true
        POST-ACCUM @@pool += v
      ORDER BY getvid(v);
    ResultSet (Identities) = ResultSet UNION hold;

    seed (Identities) = {@@pool};
  END;
  
  address = SELECT addr FROM ResultSet:start-((<Reverse_Resolve):r)-ResultSet:addr
            WHERE @@domainSystems.contains(r.system) == TRUE
            ACCUM start.@reverse += true;
  
  address2 = SELECT addr FROM ResultSet:addr-((Reverse_Resolve_Contract>):r)-Contracts:c
            WHERE r.system == "ENS"
            ACCUM addr.@reverse += true;
  
  IF reverse_flag == 0 THEN
    PRINT ResultSet as vertices;
  ELSE IF reverse_flag == 1 THEN
    PRINT ResultSet as vertices WHERE (@@domainSystems.contains(ResultSet.platform) == TRUE AND ResultSet.@reverse == TRUE) OR
      (@@domainSystems.contains(ResultSet.platform) == FALSE);
  ELSE IF reverse_flag == 2 THEN
    PRINT ResultSet as vertices WHERE (@@domainSystems.contains(ResultSet.platform) == TRUE AND ResultSet.@reverse == FALSE) OR
      (@@domainSystems.contains(ResultSet.platform) == FALSE);
  END;
}

CREATE OR REPLACE QUERY neighbors_with_source(VERTEX<Identities> p, INT depth=10) FOR GRAPH IdentityGraph SYNTAX V2 { 
  MinAccum<INT> @min_dis;
  OrAccum @or_visited = false;
  OrAccum @or_visited2 = false;
  ListAccum<VERTEX<Identities>> @path_list;
  SetAccum<STRING> @source_list;
  SetAccum<EDGE> @@edge_set;

  ##### Initialization  #####
  seed (Identities) = {p};
  seed = SELECT s
           FROM seed:s
     ACCUM s.@or_visited += true,
           s.@min_dis = 0,
           s.@path_list = s;
  ResultSet = {p};

  ##### Calculate distances and paths #####
  WHILE(seed.size()>0) LIMIT depth DO
    SetAccum<VERTEX> @@pool;
    proof = SELECT t
      FROM seed:s1-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pf)-Identities:t-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pw)-seed:s2
        WHERE t.@or_visited == false AND s1 == s2
          ACCUM
            t.@min_dis += s1.@min_dis + 1,
            t.@path_list = s1.@path_list + [t],
            t.@source_list += s1.@source_list,
            t.@source_list += pf.source,
            t.@source_list += pw.source,
            t.@or_visited += true
          POST-ACCUM @@pool += t
        ORDER BY getvid(t);
    ResultSet = ResultSet UNION proof;

    hold = SELECT v
      FROM seed:s-((Hold_Identity>|<Hold_Identity):e)-Identities:v
        WHERE v.@or_visited2 == false
        ACCUM
          v.@min_dis += s.@min_dis + 1,
          v.@path_list = s.@path_list + [v],
          v.@source_list += s.@source_list,
          v.@source_list += e.source,
          v.@or_visited2 += true
        POST-ACCUM @@pool += v
      ORDER BY getvid(v);
    ResultSet = ResultSet UNION hold;

    seed (Identities) = {@@pool};
  END;
  PRINT ResultSet AS vertices;
}


CREATE OR REPLACE QUERY identity_by_source(VERTEX<Identities> p, STRING source) FOR GRAPH IdentityGraph SYNTAX V2 {
  start (Identities) = {p};
  vertices = SELECT v FROM start-((Proof_Forward>|Proof_Backward>):e)-Identities:v
            WHERE e.source == source;
  PRINT vertices;
}

CREATE OR REPLACE QUERY owners_by_ids(SET<STRING> ids) FOR GRAPH IdentityGraph SYNTAX V2 {
  start (Identities) = SELECT s FROM Identities:s WHERE s.id IN ids;
  # SumAccum<STRING> @query_id;
  MapAccum<VERTEX<Identities>, VERTEX<Identities>> @@owners_map;
  vertices = SELECT v FROM start:s-((<Hold_Identity):e)-Identities:v
            ACCUM @@owners_map += (s -> v);
  FOREACH (query_id, owner) IN @@owners_map DO
    identity (Identities) = { owner };
    PRINT query_id as query_id, identity;
  END;
}

CREATE OR REPLACE QUERY query_keybase_connections(STRING p) FOR GRAPH SocialGraph SYNTAX V2 {
  SetAccum<STRING> @@vlist;
  SetAccum<VERTEX> @@existing_vlist;
  @@vlist += p;
  @@existing_vlist = to_vertex_set(@@vlist, "Identities"); // check existence of a vertex without slowing server
  seed (ANY) = {@@existing_vlist};
  ListAccum<STRING> @@keybase_platform = ["twitter", "keybase", "github", "reddit", "mstdn.jp", "lobste.rs", "hackernews"];
  SetAccum<VERTEX> @@vertices;
  OrAccum @visited = FALSE;

  WHILE(seed.size()>0) LIMIT 2 DO
    SetAccum<VERTEX> @@pool;
    proof = SELECT v FROM seed-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pf)-Identities:v-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pw)-seed
           WHERE v.@visited == FALSE AND @@keybase_platform.contains(v.platform) == TRUE
           POST-ACCUM v.@visited = TRUE, @@vertices += v, @@pool += v;
    seed (Identities) = {@@pool};
  END;
  ResultSet (Identities) = {@@vertices};
  PRINT ResultSet as vertices;
}

CREATE OR REPLACE QUERY expired_time_by_ids(SET<STRING> ids) FOR GRAPH SocialGraph SYNTAX V2 {
  MapAccum<VERTEX<Identities>, DATETIME> @@expired_time_map;
  VertexSet (Identities) = SELECT s FROM Identities:s WHERE s.id IN ids
                          ACCUM @@expired_time_map += (s -> to_datetime("1970-01-01 00:00:00"));

  address = SELECT addr FROM VertexSet:domain-((<Hold_Identity):h)-Identities:addr
            ACCUM @@expired_time_map += (domain -> h.expired_at);
  PRINT @@expired_time_map as expired_time_map;
}

CREATE OR REPLACE QUERY neighbor_reverse_by_ids(SET<STRING> ids) FOR GRAPH IdentityGraph SYNTAX V2 {
  MapAccum<VERTEX<Identities>, BOOL> @@reverse_map;
  // Init.
  VertexSet (Identities) = SELECT s FROM Identities:s WHERE s.id IN ids
                          ACCUM @@reverse_map += (s -> false);
  ListAccum<STRING> @@domainSystems = ["dotbit", "lens", "unstoppabledomains", "space_id", "crossbell"];

  address = SELECT addr FROM VertexSet:domain-((<Reverse_Resolve):r)-Identities:addr
            WHERE @@domainSystems.contains(r.system) == TRUE
            ACCUM @@reverse_map += (domain -> true);
  
  address2 = SELECT addr FROM VertexSet:addr-((Reverse_Resolve_Contract>):r)-Contracts:c
            WHERE r.system == "ENS"
            ACCUM @@reverse_map += (addr -> true);
  PRINT @@reverse_map as reverse_map;
}


CREATE OR REPLACE QUERY identities_by_ids(SET<STRING> ids) FOR GRAPH IdentityGraph SYNTAX V2 {
  vertices = SELECT s FROM Identities:s WHERE s.id IN ids;
  PRINT vertices;
}

CREATE OR REPLACE QUERY identity_owned_by(VERTEX<Identities> p, STRING platform) FOR GRAPH IdentityGraph SYNTAX V2 {
  start (Identities) = {p};
  owner = SELECT v FROM start-((<Hold_Identity):e)-Identities:v
        WHERE e.source == platform;
  PRINT owner;
}

CREATE OR REPLACE QUERY hold_nft(STRING id, STRING chain, STRING address) FOR GRAPH IdentityGraph SYNTAX V2 {
  SetAccum<EDGE> @@holds;
  contract = SELECT v FROM Identities:s-((Hold_Contract>):e)-Contracts:v
        WHERE v.chain == chain AND v.address == address AND e.id == id
        ACCUM
          @@holds += e;
  PRINT @@holds AS holds;
}

CREATE OR REPLACE QUERY nfts(VERTEX<Identities> p, SET<STRING> categories, INT numPerPage = 100, INT pageNum = 0) FOR GRAPH IdentityGraph {
  SetAccum<EDGE> @@edges;
  start (Identities) = {p};
  
  IF categories.size() > 0 THEN
    hold = SELECT v FROM start-((Hold_Contract>):e)-Contracts:v
          WHERE v.category IN categories
          ACCUM @@edges += e
          ORDER BY getvid(v)
          LIMIT numPerPage OFFSET pageNum * numPerPage;
  ELSE
    hold = SELECT v FROM start-((Hold_Contract>):e)-Contracts:v
          ACCUM @@edges += e
          ORDER BY getvid(v)
          LIMIT numPerPage OFFSET pageNum * numPerPage;
  END;
  PRINT @@edges AS edges;
}

CREATE OR REPLACE QUERY reverse_domains(VERTEX<Identities> p, SET<STRING> domainSystems) FOR GRAPH IdentityGraph {
  OrAccum @reverse = FALSE;
  SetAccum<EDGE> @@reverse_records;

  seed (Identities) = {p};
  identity_record = SELECT v FROM seed-((Reverse_Resolve>):e1)-Identities:v-((Resolve>):e2)-seed
                    ACCUM @@reverse_records += e1;
  contract_record = SELECT v FROM seed-((Reverse_Resolve_Contract>):e1)-Contracts:v-((Resolve_Contract>):e2)-seed
                    ACCUM @@reverse_records += e1;

  PRINT @@reverse_records as reverse_records;
}


CREATE OR REPLACE QUERY domain2(STRING name, STRING system) FOR GRAPH IdentityGraph {
  EDGE record;
  EDGE hold;
  EDGE reverse_edge;
  OrAccum @@reverse;
  IF system == "ENS" THEN
    resolved = SELECT v FROM Contracts:c-((Resolve_Contract>):e)-Identities:v
              WHERE e.system == system AND e.name == name
              ACCUM
                record = e;
    reverse_record = SELECT v FROM Identities:v-((Reverse_Resolve_Contract>):e)-Contracts:c
              WHERE e.system == system AND e.name == name
              ACCUM
                reverse_edge = e,
                @@reverse += TRUE;
    owner = SELECT s FROM Identities:s-((Hold_Contract>):e)-Contracts:v
              WHERE e.id == name
              ACCUM
                hold = e;
    PRINT record, hold, resolved, owner, @@reverse as reverse, reverse_record;
  ELSE
    resolved = SELECT v FROM Identities:s-((Resolve>):e)-Identities:v
              WHERE e.system == system AND e.name == name
              ACCUM
                record = e;
    reverse_record = SELECT v FROM Identities:v-((Reverse_Resolve>):e)-Identities:tgt
              WHERE e.system == system AND e.name == name
              ACCUM
                reverse_edge = e,
                @@reverse += TRUE;
    owner = SELECT s FROM Identities:s-((Hold_Identity>):e)-Identities:v
              WHERE v.platform == system AND v.identity == name
              ACCUM
                hold = e;
    PRINT record, hold, resolved, owner, @@reverse as reverse, reverse_record;
  END;
}

CREATE OR REPLACE QUERY domain(STRING name, STRING system) FOR GRAPH IdentityGraph {
  EDGE record;
  EDGE hold;
  IF system == "ENS" THEN
    resolved = SELECT v FROM Contracts:c-((Resolve_Contract>):e)-Identities:v
              WHERE e.system == system AND e.name == name
              ACCUM
                record = e;
    owner = SELECT s FROM Identities:s-((Hold_Contract>):e)-Contracts:v
              WHERE e.id == name
              ACCUM
                hold = e;
    PRINT record, hold, resolved, owner;
  ELSE
    resolved = SELECT v FROM Identities:s-((Resolve>):e)-Identities:v
              WHERE e.system == system AND e.name == name
              ACCUM
                record = e;
    owner = SELECT s FROM Identities:s-((Hold_Identity>):e)-Identities:v
              WHERE v.platform == system AND v.identity == name
              ACCUM
                hold = e;
    PRINT record, hold, resolved, owner;
  END;
}

CREATE OR REPLACE QUERY contracts_by_ids(SET<STRING> ids) FOR GRAPH IdentityGraph SYNTAX V2 {
  vertices = SELECT s FROM Contracts:s WHERE s.id IN ids;
  PRINT vertices;
}




INSTALL QUERY ALL

