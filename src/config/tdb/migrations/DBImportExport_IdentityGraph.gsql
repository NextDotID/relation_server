CREATE GRAPH IdentityGraph (Identities, Proof_Forward, Proof_Backward, Contracts, Hold_Identity, Hold_Contract, Resolve, Reverse_Resolve, Resolve_Contract, Reverse_Resolve_Contract, Relation_Unique_TX, Relation_TX, Social_Feed)

USE GRAPH IdentityGraph

CREATE OR REPLACE QUERY delete_vertex_and_edge(VERTEX<Identities> p, INT depth=10) FOR GRAPH IdentityGraph SYNTAX v2 {
  SetAccum<EDGE> @@edges;
  SetAccum<VERTEX> @@vertices;
  OrAccum @visited = FALSE;
  OrAccum @visited2 = FALSE;

  seed (Identities) = {p};
  WHILE(seed.size()>0) LIMIT depth DO
    SetAccum<VERTEX> @@pool;
    proof = SELECT v FROM seed:s1-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pf)-Identities:v-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pw)-seed:s2
           WHERE v.@visited == FALSE AND s1 == s2
           ACCUM @@edges += pf, @@edges += pw, @@vertices += v, v.@visited = TRUE
           POST-ACCUM @@pool += v;
    hold = SELECT v FROM seed-((Hold_Identity>|<Hold_Identity):e)-Identities:v
           WHERE v.@visited2 == FALSE
           ACCUM @@edges += e, @@vertices += v, v.@visited2 = TRUE
           POST-ACCUM @@pool += v;
    seed (Identities) = {@@pool};
  END;

  vertex2delete (Identities) = {@@vertices};
  contracts = SELECT v FROM vertex2delete-((Reverse_Resolve_Contract>|<Resolve_Contract):e)-Contracts:v ACCUM DELETE(e);
  contracts = SELECT v FROM vertex2delete-((Hold_Contract>):e)-Contracts:v ACCUM DELETE(e);
  resolved = SELECT v FROM vertex2delete-((Resolve>|<Reverse_Resolve):e)-Identities:v ACCUM DELETE(e);
  proof2delete = SELECT v FROM vertex2delete-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward|Hold_Identity>|<Hold_Identity):e)-Identities:v ACCUM DELETE(e);
  result = SELECT v FROM vertex2delete:v POST-ACCUM DELETE(v);
}

CREATE OR REPLACE QUERY neighbors(VERTEX<Identities> p, INT depth) FOR GRAPH IdentityGraph { 
  SetAccum<EDGE> @@edges;
  SetAccum<VERTEX> @@vertices;
  OrAccum @visited = FALSE;
  OrAccum @visited2 = FALSE;

  seed (Identities) = {p};
  FOREACH i in RANGE[1, depth] DO
    SetAccum<VERTEX> @@pool;
    proof = SELECT v FROM seed-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pf)-Identities:v-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pw)-seed
           WHERE v.@visited == FALSE
           ACCUM @@edges += pf, @@edges += pw, @@vertices += v, v.@visited = TRUE
           POST-ACCUM @@pool += v;
    hold = SELECT v FROM seed-((Hold_Identity>|<Hold_Identity):e)-Identities:v
           WHERE v.@visited2 == FALSE
           ACCUM @@edges += e, @@vertices += v, v.@visited2 = TRUE
           POST-ACCUM @@pool += v;
    seed (Identities) = {@@pool};
  END;
  PRINT @@vertices AS vertices, @@edges AS edges;
}

CREATE OR REPLACE QUERY neighbors_with_source(VERTEX<Identities> p, INT depth=10) FOR GRAPH IdentityGraph SYNTAX V2 { 
  MinAccum<INT> @min_dis;
  OrAccum @or_visited = false;
  OrAccum @or_visited2 = false;
  ListAccum<VERTEX<Identities>> @path_list;
  SetAccum<STRING> @source_list;
  SetAccum<EDGE> @@edge_set;

  ##### Initialization  #####
  seed (Identities) = {p};
  seed = SELECT s
           FROM seed:s
     ACCUM s.@or_visited += true,
           s.@min_dis = 0,
           s.@path_list = s;
  ResultSet = {p};

  ##### Calculate distances and paths #####
  WHILE(seed.size()>0) LIMIT depth DO
    SetAccum<VERTEX> @@pool;
    proof = SELECT t
      FROM seed:s1-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pf)-Identities:t-((Proof_Forward>|<Proof_Forward|Proof_Backward>|<Proof_Backward):pw)-seed:s2
        WHERE t.@or_visited == false AND s1 == s2
          ACCUM
            t.@min_dis += s1.@min_dis + 1,
            t.@path_list = s1.@path_list + [t],
            t.@source_list += s1.@source_list,
            t.@source_list += pf.source,
            t.@source_list += pw.source,
            t.@or_visited += true
          POST-ACCUM @@pool += t
        ORDER BY getvid(t);
    ResultSet = ResultSet UNION proof;

    hold = SELECT v
      FROM seed:s-((Hold_Identity>|<Hold_Identity):e)-Identities:v
        WHERE v.@or_visited2 == false
        ACCUM
          v.@min_dis += s.@min_dis + 1,
          v.@path_list = s.@path_list + [v],
          v.@source_list += s.@source_list,
          v.@source_list += e.source,
          v.@or_visited2 += true
        POST-ACCUM @@pool += v
      ORDER BY getvid(v);
    ResultSet = ResultSet UNION hold;

    seed (Identities) = {@@pool};
  END;
  PRINT ResultSet AS vertices;
}


CREATE QUERY identity_by_source(VERTEX<Identities> p, STRING source) FOR GRAPH IdentityGraph SYNTAX V2 {
  start (Identities) = {p};
  vertices = SELECT v FROM start-((Proof_Forward>|Proof_Backward>):e)-Identities:v
            WHERE e.source == source;
  PRINT vertices;
}


CREATE QUERY identities_by_ids(SET<STRING> ids) FOR GRAPH IdentityGraph SYNTAX V2 {
  vertices = SELECT s FROM Identities:s WHERE s.id IN ids;
  PRINT vertices;
}

CREATE QUERY identity_owned_by(VERTEX<Identities> p, STRING platform) FOR GRAPH IdentityGraph SYNTAX V2 {
  start (Identities) = {p};
  owner = SELECT v FROM start-((<Hold_Identity):e)-Identities:v
        WHERE e.source == platform;
  PRINT owner;
}

CREATE QUERY hold_nft(STRING id, STRING chain, STRING address) FOR GRAPH IdentityGraph SYNTAX V2 {
  SetAccum<EDGE> @@holds;
  contract = SELECT v FROM Identities:s-((Hold_Contract>):e)-Contracts:v
        WHERE v.chain == chain AND v.address == address AND e.id == id
        ACCUM
          @@holds += e;
  PRINT @@holds AS holds;
}

CREATE QUERY nfts(VERTEX<Identities> p, SET<STRING> categories, INT numPerPage = 100, INT pageNum = 0) FOR GRAPH IdentityGraph {
  SetAccum<EDGE> @@edges;
  start (Identities) = {p};
  
  IF categories.size() > 0 THEN
    hold = SELECT v FROM start-((Hold_Contract>):e)-Contracts:v
          WHERE v.category IN categories
          ACCUM @@edges += e
          ORDER BY getvid(v)
          LIMIT numPerPage OFFSET pageNum * numPerPage;
  ELSE
    hold = SELECT v FROM start-((Hold_Contract>):e)-Contracts:v
          ACCUM @@edges += e
          ORDER BY getvid(v)
          LIMIT numPerPage OFFSET pageNum * numPerPage;
  END;
  PRINT @@edges AS edges;
}

CREATE QUERY domain(STRING name, STRING system) FOR GRAPH IdentityGraph {
  EDGE record;
  EDGE hold;
  IF system == "ENS" THEN
    resolved = SELECT v FROM Contracts:c-((Resolve_Contract>):e)-Identities:v
              WHERE e.system == system AND e.name == name
              ACCUM
                record = e;
    owner = SELECT s FROM Identities:s-((Hold_Contract>):e)-Contracts:v
              WHERE e.id == name
              ACCUM
                hold = e;
    PRINT record, hold, resolved, owner;
  ELSE
    resolved = SELECT v FROM Identities:s-((Resolve>):e)-Identities:v
              WHERE e.system == system AND e.name == name
              ACCUM
                record = e;
    owner = SELECT s FROM Identities:s-((Hold_Identity>):e)-Identities:v
              WHERE v.platform == system AND v.identity == name
              ACCUM
                hold = e;
    PRINT record, hold, resolved, owner;
  END;
}

CREATE QUERY contracts_by_ids(SET<STRING> ids) FOR GRAPH IdentityGraph SYNTAX V2 {
  vertices = SELECT s FROM Contracts:s WHERE s.id IN ids;
  PRINT vertices;
}

CREATE QUERY owners_by_ids(SET<STRING> ids) FOR GRAPH IdentityGraph SYNTAX V2 {
  vertices = SELECT s FROM Identities:s WHERE s.id IN ids;
  PRINT vertices;
}

CREATE OR REPLACE QUERY expand(VERTEX<Identities> p, INT depth) FOR GRAPH IdentityGraph { 
  SetAccum<EDGE> @@edges;
  OrAccum @visited = FALSE;

  seed (Identities) = {p};
  FOREACH i in RANGE[1, depth] DO
    seed = SELECT v FROM seed-((Relation_Unique_TX>|<Relation_Unique_TX|Social_Feed>|<Social_Feed|Relation_TX>|<Relation_TX):e)-Identities:v
           WHERE v.@visited == FALSE
           ACCUM @@edges += e, v.@visited = TRUE;
  END;
  PRINT @@edges AS relations;
}

CREATE OR REPLACE QUERY relation_single_pair(VERTEX<Identities> v_source, VERTEX<Identities> target_v, INT depth = 10) FOR GRAPH IdentityGraph {
  ListAccum<ListAccum<VERTEX>> @path_list; 
  ListAccum<ListAccum<VERTEX>> @new_list;
  OrAccum @end_point;
  ListAccum<ListAccum<VERTEX>> @@total_path_list; // all vertex as List
  SetAccum<EDGE> @@total_edge_list; // all edge as Set

  endset = {target_v};
  endset = SELECT s
          From endset:s
          ACCUM s.@end_point = true;
  
  Source = {v_source};
  Source = SELECT s 
           FROM Source:s
           ACCUM s.@path_list = [s];
  
  WHILE Source.size() > 0 LIMIT depth DO 
       Source = SELECT t 
                 FROM Source:s-((Relation_Unique_TX>|<Relation_Unique_TX|Social_Feed>|<Social_Feed|Relation_TX>|<Relation_TX):e)-Identities:t
                 ACCUM @@total_edge_list += e,
                 FOREACH sequence IN s.@path_list DO 
                   IF t.@end_point == true THEN
                     @@total_path_list += [sequence + [t]]
                   ELSE IF sequence.contains(t) == FALSE THEN
                     t.@new_list += [sequence + [t]]  
                   END
                 END
        POST-ACCUM s.@path_list.clear();
  
      Source = SELECT t 
                FROM Source:t    
                POST-ACCUM t.@path_list = t.@new_list,
                           t.@new_list.clear()
                HAVING t.@path_list.size() > 0;
  END;
  PRINT @@total_path_list as path, @@total_edge_list as relations;
}

INSTALL QUERY ALL
