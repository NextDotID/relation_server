CREATE GRAPH SocialGraph(Identities, Contracts, Relation_Unique_TX, Relation_TX)

CREATE OR REPLACE QUERY expand(VERTEX<Identities> p, INT depth) FOR GRAPH SocialGraph { 
  SetAccum<EDGE> @@edges;
  OrAccum @visited = FALSE;

  seed (Identities) = {p};
  FOREACH i in RANGE[1, depth] DO
    seed = SELECT v FROM seed-((Relation_Unique_TX>|<Relation_Unique_TX):e)-Identities:v
           WHERE v.@visited == FALSE
           ACCUM @@edges += e, v.@visited = TRUE;
  END;
  PRINT @@edges AS relations;
}

CREATE OR REPLACE QUERY relation_single_pair(VERTEX<Identities> v_source, VERTEX<Identities> target_v, INT depth = 10) FOR GRAPH SocialGraph {
  ListAccum<ListAccum<VERTEX>> @path_list; 
  ListAccum<ListAccum<VERTEX>> @new_list;
  OrAccum @end_point;
  ListAccum<ListAccum<VERTEX>> @@total_path_list; // all vertex as List
  SetAccum<EDGE> @@total_edge_list; // all edge as Set

  endset = {target_v};
  endset = SELECT s
          From endset:s
          ACCUM s.@end_point = true;
  
  Source = {v_source};
  Source = SELECT s 
           FROM Source:s
           ACCUM s.@path_list = [s];
  
  WHILE Source.size() > 0 LIMIT depth DO 
       Source = SELECT t 
                 FROM Source:s-((Relation_Unique_TX>|<Relation_Unique_TX):e)-Identities:t
                 ACCUM @@total_edge_list += e,
                 FOREACH sequence IN s.@path_list DO 
                   IF t.@end_point == true THEN
                     @@total_path_list += [sequence + [t]]
                   ELSE IF sequence.contains(t) == FALSE THEN
                     t.@new_list += [sequence + [t]]  
                   END
                 END
        POST-ACCUM s.@path_list.clear();
  
      Source = SELECT t 
                FROM Source:t    
                POST-ACCUM t.@path_list = t.@new_list,
                           t.@new_list.clear()
                HAVING t.@path_list.size() > 0;
  END;
  PRINT @@total_path_list as path, @@total_edge_list as relations;
}
